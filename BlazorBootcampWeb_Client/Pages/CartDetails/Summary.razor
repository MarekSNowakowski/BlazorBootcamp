@page "/summary"
@inject IJSRuntime _jsRuntime;
@inject ILocalStorageService _localStorage
@inject IProductService _productService
@inject IPaymentService _paymentService
@inject IOrderService _orderService
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@if (IsProcessing)
{
    <div style="position:fixed;top:50%;left:50%;margin-top:-50px;margin-left:-100px;">
        <img src="images/ajax-loader.gif" />
    </div>
}
else
{
    <div class="mt-4 mx-4 px-md-5 mx-md-5 p-1">

        <div class="row p-2 my-3">
            <div class="col-12 col-lg-7 p-4">
                <div class="row px-2 text-success ">
                    <div class="col-8 py-1"><p style="font-size:x-large;margin:0px;">Order Summary</p></div>
                    <div class="col-4 p-0" style="text-align:right">
                        <a href="/cart" class="btn btn-secondary btn-block">Back to cart</a>
                    </div>
                </div>

                @foreach (var prod in Order.Details)
                {
                    <div class="row border p-1 m-1">

                        <div class="col-3 col-md-2 ">
                            <img src="@prod.Product.ImageUrl" width="100%">
                        </div>
                        <div class="col-5 col-md-5 ">
                            <span class="">Product : @prod.ProductName </span><br />
                            <span class="pt-1">Size : @prod.Size </span><br />
                            <span class="pt-1">Count : @prod.Count </span><br />

                        </div>
                        <div class="col-4 col-md-5 " style="text-align:right;">
                            <h4 class="text-warning font-weight-bold pt-2">
                                PLN
                                <span style="border-bottom:1px solid #ff6a00">
                                    @((prod.Count * prod.Price).ToString("c"))
                                </span>
                            </h4>
                        </div>
                    </div>
                }
                <div class="row" style="text-align:right">
                    <div class="col-12 px-3">
                        <h3> Order Total : <span class="text-secondary">@Order.Header.OrderTotal.ToString("c")</span> </h3>
                    </div>
                </div>
            </div>

            <div class="col-12 col-lg-5 p-4 ml-4 ml-md-0 mt-4 mt-md-0 border">
                <EditForm Model="Order.Header" OnValidSubmit="HandleCheckout">
                    <DataAnnotationsValidator/>
                    <div class="row px-2 text-success border-bottom"><div class="col-7 py-1"><p style="font-size:x-large;margin:0px;">Enter Details</p></div></div>

                    <div class="form-group pt-2">
                        <label class="text-warning">Name</label>
                        <InputText @bind-Value="Order.Header.Name" type="text" class="form-control" />
                        <ValidationMessage For="() => Order.Header.Name" />
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Phone</label>
                        <InputText @bind-Value="Order.Header.PhoneNumber" type="text" class="form-control" />
                        <ValidationMessage For="() => Order.Header.PhoneNumber" />
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Email</label>
                        <InputText @bind-Value="Order.Header.Email" type="text" class="form-control" />
                        <ValidationMessage For="() => Order.Header.Email" />
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Street Address</label>
                        <InputText @bind-Value="Order.Header.StreetAddress" type="text" class="form-control" />
                        <ValidationMessage For="() => Order.Header.StreetAddress" />
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">City</label>
                        <InputText @bind-Value="Order.Header.City" type="text" class="form-control" />
                        <ValidationMessage For="() => Order.Header.City" />
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">State</label>
                        <InputText @bind-Value="Order.Header.Province" type="text" class="form-control" />
                        <ValidationMessage For="() => Order.Header.Province" />
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Postal Code</label>
                        <InputText @bind-Value="Order.Header.PostalCode" type="text" class="form-control" />
                        <ValidationMessage For="() => Order.Header.PostalCode" />
                    </div>


                    <div class="form-group pt-2">
                        <button type="submit" class="btn btn-success form-control">Checkout Now</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    public bool IsProcessing { get; set; } = false;
    private OrderDTO Order { get; set; } = null;
    private IEnumerable<ProductDTO> Products { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;

        List<ShoppingCart> cart = await _localStorage.GetItemAsync<List<ShoppingCart>>(SD.ShoppingCart);
        Products = await _productService.GetAll();
        Order = new()
            {
                Header = new()
                {
                    OrderTotal = 0,
                    Status = SD.Status_Pending
                },
                Details = new List<OrderDetailDTO>()
            };

        foreach(var item in cart)
        {
            ProductDTO product = Products.FirstOrDefault(u => u.Id == item.ProductId);
            ProductPriceDTO productPrice = product.ProductPrices.FirstOrDefault(u => u.Id == item.ProductPriceId);

            OrderDetailDTO orderDetailDTO = new()
                {
                    ProductName = product.Name,
                    ProductId = item.ProductId,
                    Size = productPrice.Size,
                    Count = item.Count,
                    Price = productPrice.Price,
                    Product = product
                };
            Order.Details.Add(orderDetailDTO);
            Order.Header.OrderTotal += (item.Count * productPrice.Price);
        }

        if(await _localStorage.GetItemAsync<UserDTO>(SD.Local_UserDetails) != null) 
        {
            var userInfo = await _localStorage.GetItemAsync<UserDTO>(SD.Local_UserDetails);
            Order.Header.UserId = userInfo.Id;
            Order.Header.Name = userInfo.Name;
            Order.Header.Email = userInfo.Email;
            Order.Header.PhoneNumber = userInfo.PhoneNumber;
        }

        IsProcessing = false;
    }

    private async Task HandleCheckout()
    {
        try
        {
            IsProcessing = true;

            var paymentDto = new StripePaymentDTO()
                {
                    Order = Order
                };

            var result = await _paymentService.Checkout(paymentDto);

            Order.Header.SessionId = result.Data.ToString();

            var orderDTOSaved = await _orderService.Create(paymentDto);

            await _localStorage.SetItemAsync(SD.Local_OrderDetails, orderDTOSaved);

            await _jsRuntime.InvokeVoidAsync("redirectToCheckout", result.Data.ToString());
        }
        catch(Exception e)
        {
            await _jsRuntime.ToastrError(e.Message);
        }
    }
}