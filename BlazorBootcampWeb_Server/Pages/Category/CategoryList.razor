@page "/category"
@inject ICategoryRepository _categoryRepository
@inject IJSRuntime _jsRuntime
@attribute [Authorize]

<_DeleteConfirmation IsParentComponentProcessing="IsLoading" ConfirmDelete_Click="ConfirmDelete_Click" />
<div class="row mt-4"> 
    <div class="col-6">
        <h4 class="card-title text-info">Category</h4>
    </div>
    <div class="col-5 offset-1">
        <a href="category/create" class="btn btn-info form-control">Add New Category</a>
    </div>
    <div class="col-12">
        @if(Categories.Any())
        {
            <table class="table table-bordered">
                <thread>
                    <tr>
                        <th>Name</th>
                        <th>Actions</th>
                    </tr>
                </thread>
                <tbody>
                    @foreach(var objCat in Categories)
                    {
                        <tr>
                            <td>
                                @objCat.Name
                            </td>
                            <td>
                                <NavLink href="@($"category/edit/{objCat.Id}")" class="btn-primary btn"> Edit </NavLink>
                                <button class="btn btn-danger" @onclick="()=>HandleDelete(objCat.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            if(IsLoading)
            {
                <div class="text-center">
                    <img src="/images/loading.gif"/>
                </div>
            }
            else
            {
                <p>No records found.</p>
            }
        }
    </div>
</div>


@code {
    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();

    public bool IsLoading { get; set; }
    private int DeleteCategoryId { get; set; } = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await LoadCategories();
        }
    }

    private async Task LoadCategories()
    {
        IsLoading = true;
        StateHasChanged();
        Categories = await _categoryRepository.GetAll();
        IsLoading = false;
        StateHasChanged();
    }

    private void HandleDelete(int id)
    {
        DeleteCategoryId = id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;

        if(isConfirmed && DeleteCategoryId!=0)
        {
            //Delete
            await _categoryRepository.Delete(DeleteCategoryId);
            await LoadCategories();
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }

        IsLoading = false;
    }
}
